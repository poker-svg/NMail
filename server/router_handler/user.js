/*
 * @Author: Xin 201220028@smail.nju.edu.cn
 * @Date: 2023-03-31 09:49:26
 * @LastEditors: Xin 201220028@smail.nju.edu.cn
 * @LastEditTime: 2023-04-11 09:26:29
 * @FilePath: \NMail\server\router_handler\user.js
 * @Description: 后端的用户处理器
 */

// 导入数据库连接和控制模块
const database = require("../database/index");
// 导入用于加密的第三方包
const bcrypt = require("bcryptjs");
// 导入用于token生成的包
const json_web_token = require("jsonwebtoken");
// 导入全局配置模块
const config = require("../config");
// 导入验证码生成包
const svgCaptcha = require("svg-captcha");

// 注册新用户的处理函数
/**
 *
 * @api {POST} /api/reguser 注册用户
 * @apiName 用户注册接口
 * @apiGroup 登录注册
 * @apiVersion  1.0.0
 *
 * @apiParam  {string} username 用户名
 * @apiParam  {string} password 密码
 *
 * @apiSuccess (返回参数说明) {int} status 请求是否成功，0：成功；1：失败
 * @apiSuccess (返回参数说明) {string} message 请求结果的描述消息
 *
 * @apiParamExample  {json} Request-Example:
 * {
 *     "username" : "user"
 *     "password" : "password"
 * }
 *
 * @apiSuccessExample {json} Success-Response:
 * {
 *     "status"  : 0,
 *     "message" : "注册成功！"
 * }
 */
exports.regUserHandler = (req, res) => {
  // 获取客户端提交到服务器的用户信息
  const userinfo = req.body;

  // 检查用户名是否被占用
  const sqlStr = "select * from users where username=?";
  database.query(sqlStr, userinfo.username, (err, results) => {
    if (err) return res.response_data(err);
    if (results.length > 0)
      return res.response_data("用户名被占用，请更换其他用户名！");

    // 对密码进行加密
    userinfo.password = bcrypt.hashSync(userinfo.password, 10);
    // 插入新用户
    const insert_sqlStr = "insert into users set ?";
    database.query(
      insert_sqlStr,
      { username: userinfo.username, password: userinfo.password },
      (err, results) => {
        if (err) {
          return res.response_data(err);
        }
        if (results.affectedRows !== 1) {
          return res.response_data("注册用户失败,请稍后重试!");
        }

        return res.response_data("注册用户成功!", 0);
      }
    );
  });
};

// 用户登录的处理函数
/**
 *
 * @api {POST} /api/login 用户登录
 * @apiName 用户登录接口
 * @apiGroup 登录注册
 * @apiVersion  1.0.0
 *
 * @apiParam  {string} username 用户名
 * @apiParam  {string} password 密码
 *
 * @apiSuccess (返回参数说明) {int} status 请求是否成功，0：成功；1：失败
 * @apiSuccess (返回参数说明) {string} message 请求结果的描述消息
 * @apiSuccess (返回参数说明) {string} token 用于有权限接口的身份认证
 *
 * @apiParamExample  {json} Request-Example:
 * {
 *     "username" : "user"
 *     "password" : "password"
 * }
 *
 * @apiSuccessExample {json} Success-Response:
 * {
 *    "status": 0,
 *    "message": "登录成功！",
 *    "token": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInBhc3N3b3JkIjoiIiwibmlja25hbWUiOiLms6Xlt7Tlt7QiLCJlbWFpbCI6Im5pYmFiYUBpdGNhc3QuY24iLCJ1c2VyX3BpYyI6IiIsImlhdCI6MTU3ODAzNjY4MiwiZXhwIjoxNTc4MDcyNjgyfQ.Mwq7GqCxJPK-EA8LNrtMG04llKdZ33S9KBL3XeuBxuI"
 * }
 */
exports.loginHandler = (req, res) => {
  const userinfo = req.body;

  // 在数据库中查询登录用户信息
  const select_user_sqlStr = "select * from users where username=?";
  database.query(select_user_sqlStr, userinfo.username, (err, results) => {
    if (err) {
      return res.response_data(err);
    }
    if (results.length !== 1) {
      return res.response_data("登陆失败！");
    }

    // 判断用户密码是否正确
    const compareResult = bcrypt.compareSync(
      userinfo.password,
      results[0].password
    );
    if (!compareResult) return res.response_data("登陆失败！");

    // 生成客户端的token并发回客户端，为了安全token应剔除用户敏感信息
    const user = { ...results[0], password: "", user_pic: "" };
    const tokenStr = json_web_token.sign(user, config.jwtSecretKey, {
      expiresIn: config.expiresIn,
    });
    res.send({
      status: 0,
      message: "登录成功！",
      token: "Bearer " + tokenStr,
    });
  });
};

// 获取验证码的处理函数
/**
 *
 * @api {GET} /api/captcha 获取验证码
 * @apiName 获取验证码接口
 * @apiGroup 登录注册
 * @apiVersion  1.0.0
 *
 * @apiParam {Object} null 此接口没有参数
 *
 * @apiSuccess (返回参数说明) {int} status 请求是否成功，0：成功；1：失败
 * @apiSuccess (返回参数说明) {string} message 请求结果的描述消息
 * @apiSuccess (返回参数说明) {string} data 验证码图片
 * @apiSuccess (返回参数说明) {string} text 验证码文本
 *
 *
 * @apiSuccessExample {json} Success-Response:
 * {
 *    "status": 0,
 *    "message": "获取验证码成功！",
 *    "data": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"150\" height=\"50\" viewBox=\"0,0,150,50\"><path fill=\"#b7df3e\" d=\"M23.56 33.32L23.53 33.29L23.47 33.22Q23.45 36.17 22.27 40.82L22.18 40.73L22.27 40.82Q20.50 41.37 18.90 42.17L18.76 42.02L18.75 42.02Q21.52 35.15 21.25 27.73L21.24 27.72L21.28 27.76Q20.87 20.23 17.79 13.50L17.89 13.60L17.75 13.46Q19.74 14.76 21.60 15.33L21.56 15.28L21.56 15.28Q23.79 22.35 23.79 29.01L23.68 28.90L23.78 29.00Q23.86 30.53 23.79 32.02L23.72 31.95L23.62 31.85Q24.86 30.73 30.08 25.78L30.14 25.84L30.12 25.82Q31.14 25.74 32.13 25.67L32.08 25.61L34.30 25.59L34.26 25.55Q31.09 28.55 26.79 32.32L26.70 32.22L26.70 32.23Q30.11 35.02 36.58 40.85L36.56 40.83L36.56 40.83Q33.86 39.96 30.89 39.77L30.88 39.76L31.02 39.89Q28.46 37.76 23.59 33.34ZM33.35 42.38L33.35 42.38L33.39 42.42Q38.25 43.40 41.37 45.34L41.37 45.34L41.22 45.18Q40.16 44.01 37.53 41.61L37.57 41.65L37.48 41.56Q37.62 41.55 37.89 41.66L37.99 41.76L37.93 41.71Q35.88 39.73 33.64 37.83L33.60 37.80L29.17 33.90L29.26 33.99Q34.10 29.65 36.53 26.76L36.60 26.82L36.59 26.81Q35.33 26.85 32.86 27.11L32.85 27.11L32.99 27.24Q34.54 25.75 35.22 24.91L35.12 24.81L35.22 24.91Q32.40 25.36 29.92 25.36L29.93 25.37L30.02 25.46Q28.57 26.71 25.83 29.38L25.79 29.34L25.78 29.33Q25.85 23.61 24.86 17.78L24.89 17.82L24.72 17.64Q24.05 17.51 22.57 17.25L22.59 17.26L22.65 17.32Q22.44 16.55 21.99 15.06L21.91 14.99L21.89 14.97Q19.33 14.24 17.09 12.68L17.08 12.67L17.10 12.69Q20.52 19.50 20.86 27.61L20.82 27.57L20.92 27.66Q21.14 35.46 18.13 42.69L18.19 42.75L18.23 42.79Q18.95 42.53 20.29 41.88L20.22 41.81L20.28 41.87Q20.08 42.74 19.43 44.19L19.28 44.03L19.42 44.17Q22.20 43.03 24.34 42.65L24.29 42.61L24.31 42.63Q24.85 40.09 25.35 35.82L25.45 35.92L25.28 35.76Q27.91 38.04 33.36 42.38Z\"/><path fill=\"#e7597d\" d=\"M66.44 34.69L66.53 34.78L66.38 34.64Q66.49 38.32 63.33 39.62L63.23 39.52L63.34 39.63Q61.33 40.32 56.91 40.47L56.90 40.46L56.93 40.49Q52.21 40.68 49.96 39.50L49.94 39.48L49.96 39.50Q48.09 38.16 48.24 34.81L48.35 34.91L48.34 34.91Q48.21 34.12 48.40 32.15L48.56 32.31L48.50 32.25Q48.63 30.66 48.63 29.67L48.51 29.55L48.57 29.62Q48.52 21.57 44.33 14.15L44.41 14.23L44.33 14.14Q45.48 14.80 48.45 15.87L48.52 15.93L48.53 15.95Q51.38 22.64 51.38 30.03L51.39 30.04L51.48 30.13Q51.34 30.59 51.24 31.77L51.24 31.78L51.35 31.88Q51.17 32.98 51.17 33.59L51.28 33.70L51.13 33.55Q51.16 35.86 52.72 36.85L52.82 36.96L52.71 36.84Q54.44 37.73 57.40 37.73L57.31 37.64L57.36 37.69Q60.10 37.79 61.73 36.61L61.56 36.44L61.72 36.60Q63.56 35.24 63.41 32.73L63.34 32.66L63.45 32.77Q63.19 31.22 63.19 29.89L63.20 29.89L63.33 30.03Q63.19 22.85 65.59 16.34L65.59 16.33L67.75 15.75L67.91 15.92Q68.82 15.56 69.92 15.11L69.90 15.08L69.96 15.15Q66.14 22.17 66.14 29.75L66.11 29.72L66.28 29.89Q66.12 30.57 66.25 32.20L66.23 32.19L66.30 32.25Q66.48 33.93 66.48 34.73ZM68.60 35.59L68.53 35.52L68.49 35.49Q67.64 30.57 68.36 25.46L68.34 25.44L68.47 25.57Q69.15 20.31 71.54 15.93L71.52 15.91L71.59 15.98Q70.87 16.17 69.43 16.82L69.43 16.82L69.43 16.83Q69.85 16.03 70.65 14.47L70.72 14.54L70.73 14.55Q67.15 15.64 65.24 15.99L65.38 16.13L65.27 16.02Q62.97 22.59 62.97 29.86L63.01 29.90L63.02 29.91Q62.93 31.18 63.00 32.59L63.02 32.61L62.99 32.58Q63.18 35.01 61.39 36.23L61.47 36.31L61.47 36.31Q59.87 37.26 57.35 37.30L57.44 37.38L57.42 37.37Q54.70 37.45 53.25 36.69L53.21 36.65L53.13 36.57Q53.03 36.06 52.95 35.60L52.98 35.62L53.02 35.67Q53.01 35.20 53.13 34.71L53.05 34.63L53.00 34.58Q53.22 32.25 53.22 29.93L53.27 29.98L53.41 30.12Q53.40 24.28 51.87 18.38L51.71 18.21L51.72 18.22Q51.01 18.12 49.60 17.78L49.59 17.77L49.75 17.93Q49.32 16.58 48.86 15.67L48.72 15.53L48.76 15.57Q46.02 14.77 43.62 13.40L43.68 13.46L43.64 13.42Q48.37 21.12 48.37 29.84L48.20 29.66L48.34 29.81Q48.38 31.48 48.23 33.20L48.16 33.13L48.23 33.20Q47.91 35.51 47.99 36.69L47.94 36.64L47.94 36.64Q48.21 38.70 49.47 39.84L49.39 39.76L49.47 39.85Q50.30 42.16 54.95 42.54L54.94 42.54L55.04 42.64Q57.14 42.79 59.27 42.87L59.34 42.93L59.18 42.78Q64.56 42.98 67.33 42.02L67.41 42.10L67.41 42.10Q69.09 41.30 69.09 39.25L68.90 39.06L69.05 39.21Q69.03 38.05 68.57 35.57Z\"/><path d=\"M11 14 C75 31,96 41,138 3\" stroke=\"#8fcfe4\" fill=\"none\"/><path fill=\"#efd58a\" d=\"M83.34 29.67L83.26 29.58L83.30 29.63Q83.41 34.00 82.69 38.15L82.60 38.06L82.53 37.99Q84.88 37.53 87.97 37.41L87.83 37.28L87.99 37.44Q89.18 37.49 90.25 36.48L90.27 36.50L90.38 36.61Q91.38 35.53 91.38 34.20L91.46 34.28L91.48 34.30Q91.33 33.85 91.29 33.58L91.31 33.60L91.32 33.61Q91.13 30.64 88.88 29.80L89.02 29.94L89.00 29.92Q88.18 29.56 87.49 29.63L87.45 29.59L87.58 29.72Q86.47 29.60 85.44 29.63L85.44 29.63L85.48 29.67Q84.26 29.56 83.23 29.56ZM82.03 19.14L82.16 19.28L82.09 19.21Q83.06 22.61 83.33 26.99L83.24 26.91L83.23 26.89Q84.74 27.07 87.41 27.11L87.37 27.07L87.35 27.05Q90.34 27.15 90.68 23.61L90.56 23.48L90.68 23.60Q90.73 21.52 89.32 20.68L89.32 20.69L89.48 20.84Q88.58 20.32 84.16 19.68L84.15 19.67L83.99 19.50Q82.92 19.35 82.00 19.12ZM78.41 42.05L78.41 42.06L78.50 42.15Q81.00 35.51 80.74 28.13L80.71 28.10L80.71 28.10Q80.30 20.69 77.37 14.22L77.35 14.20L77.39 14.23Q81.13 16.72 87.35 16.97L87.47 17.08L87.44 17.05Q93.67 17.31 94.02 20.20L94.02 20.21L94.03 20.22Q94.31 22.94 92.90 25.60L92.92 25.62L92.87 25.57Q92.10 27.04 90.50 27.73L90.61 27.83L90.61 27.84Q94.24 28.50 94.47 33.87L94.39 33.79L94.37 33.77Q94.59 35.01 94.51 36.42L94.54 36.45L94.46 36.37Q94.42 37.70 93.48 38.63L93.47 38.62L93.42 38.56Q92.48 39.49 91.15 39.65L91.16 39.66L91.28 39.78Q89.81 39.87 88.75 39.87L88.63 39.75L88.62 39.75Q83.06 39.90 78.53 42.18ZM91.21 42.37L91.16 42.32L91.21 42.38Q92.13 42.42 94.00 42.53L94.07 42.60L94.06 42.59Q95.41 42.58 96.52 41.70L96.50 41.69L96.62 41.81Q97.29 40.76 97.17 39.20L97.22 39.24L97.29 39.32Q97.23 38.38 96.51 34.91L96.49 34.90L96.52 34.93Q95.82 31.67 93.95 30.19L93.89 30.13L93.41 29.23L93.53 29.34Q95.24 27.98 95.81 24.21L95.78 24.18L95.80 24.20Q95.86 22.96 95.78 21.55L95.85 21.62L95.84 21.61Q95.68 20.19 94.57 19.35L94.62 19.40L94.58 19.35Q94.28 19.17 94.16 19.13L94.26 19.23L94.19 19.16Q93.94 18.64 93.10 17.84L93.12 17.87L93.21 17.95Q91.62 16.82 87.40 16.63L87.32 16.55L87.49 16.72Q80.77 16.36 76.78 13.47L76.84 13.54L76.77 13.47Q80.13 20.56 80.43 28.09L80.31 27.97L80.41 28.07Q80.74 35.90 77.92 42.83L77.91 42.82L80.02 41.92L79.85 41.75Q79.61 43.03 79.11 44.17L78.98 44.04L78.97 44.03Q83.43 42.32 88.46 42.32L88.29 42.16L88.42 42.28Q89.75 42.21 91.20 42.36ZM89.02 31.77L89.01 31.76L89.08 31.83Q89.81 31.76 90.72 32.22L90.68 32.17L90.80 32.29Q90.84 32.56 90.99 33.62L91.04 33.67L90.99 33.63Q91.20 35.02 90.27 36.06L90.23 36.02L90.24 36.03Q89.37 37.14 87.96 37.03L88.01 37.08L86.41 37.08L86.54 37.21Q85.73 37.20 85.01 37.31L84.98 37.28L84.92 37.22Q85.16 35.33 85.24 31.87L85.28 31.92L85.40 32.03Q86.05 31.95 87.30 31.92L87.17 31.79L87.20 31.82Q88.53 31.85 89.14 31.89ZM88.02 22.20L88.16 22.34L88.56 22.36L88.37 22.18Q88.70 22.27 88.89 22.31L88.90 22.32L89.27 22.31L89.54 22.39L90.13 22.45L90.26 22.57Q90.32 22.79 90.32 23.09L90.19 22.96L90.23 23.54L90.24 23.55Q90.23 24.79 89.36 25.73L89.32 25.69L89.42 25.79Q88.45 26.63 87.23 26.63L87.30 26.70L87.23 26.63Q86.35 26.78 86.35 26.78L86.31 26.74L86.27 26.70Q85.03 26.75 85.37 26.75L85.37 26.74L85.39 26.77Q85.24 25.14 84.94 22.09L85.02 22.17L84.90 22.05Q86.54 22.24 88.06 22.24Z\"/><path d=\"M9 44 C69 44,77 45,133 41\" stroke=\"#df964d\" fill=\"none\"/><path d=\"M4 8 C88 4,90 9,146 3\" stroke=\"#e75f81\" fill=\"none\"/><path fill=\"#e15fa0\" d=\"M118.74 39.94L118.69 39.89L116.67 39.81L116.71 39.85Q115.82 39.92 114.87 40.03L114.88 40.04L114.85 40.01Q115.43 33.81 115.43 29.81L115.43 29.82L115.31 29.69Q111.33 23.01 103.68 14.33L103.73 14.38L103.78 14.44Q105.63 15.48 108.98 16.28L108.98 16.28L108.90 16.21Q113.90 21.74 116.91 26.96L117.07 27.12L116.96 27.00Q119.90 21.38 124.28 16.36L124.29 16.36L124.27 16.35Q126.75 16.01 129.26 15.21L129.33 15.28L129.19 15.14Q123.27 21.36 118.40 29.78L118.34 29.72L118.33 29.70Q118.33 36.75 118.63 39.83ZM127.71 17.23L130.37 14.33L130.43 14.39Q127.40 15.63 124.28 16.09L124.34 16.15L124.28 16.09Q119.97 20.72 117.15 25.83L117.21 25.88L117.21 25.89Q115.12 22.28 111.93 18.39L111.86 18.33L111.89 18.35Q111.51 18.25 111.02 18.17L111.06 18.21L111.04 18.19Q110.42 17.46 108.90 15.79L108.97 15.86L108.80 15.69Q105.42 14.93 102.45 13.37L102.50 13.42L102.50 13.42Q110.23 21.91 114.99 29.83L115.07 29.91L115.12 29.96Q115.01 36.29 114.40 40.44L114.39 40.42L114.26 40.29Q115.09 40.37 116.54 40.25L116.49 40.20L116.42 41.16L116.44 41.18Q116.52 41.71 116.44 42.25L116.40 42.21L116.39 42.20Q119.92 42.19 121.67 42.38L121.73 42.44L121.69 42.39Q120.41 37.69 120.30 31.72L120.39 31.81L120.41 31.82Q124.78 23.37 131.33 16.02L131.38 16.07L127.69 17.22Z\"/><path d=\"M7 40 C92 17,87 39,139 19\" stroke=\"#ec59ec\" fill=\"none\"/><path d=\"M11 21 C90 22,68 29,144 8\" stroke=\"#406ae7\" fill=\"none\"/><path d=\"M19 1 C65 26,71 5,136 19\"
 *    "text": "kUBY"
 * }
 */
exports.captchaHandler = (req, res) => {
  let captcha = svgCaptcha.create({
    size: 4, // 验证码长度
    ignoreChars: "0oOiIl1", // 验证码字符中排除某些字符（这里排除一些相似的字符）
    noise: 6, // 干扰线条的数量
    color: true, // 验证码的字符是否有颜色，默认没有，如果设定了背景，则默认有
  });

  res.send({
    status: 0,
    message: "获取验证码成功！",
    data: captcha.data,
    text: captcha.text,
  });
};
